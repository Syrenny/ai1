import time
import torch
import numpy as np
import pandas as pd
import torch.nn as nn
from torch import Tensor
import torch.optim as optim
import torchvision.transforms as transforms
from torchvision.datasets import ImageFolder
from torchvision import datasets, models, transforms
from torch.optim import lr_scheduler
from torchvision.transforms import ToTensor
from torchvision.models import ResNet50_Weights, resnet50
from torch.utils.data import DataLoader, random_split, Dataset
import matplotlib
import matplotlib.pyplot as plt
from sklearn.metrics import precision_score, recall_score, accuracy_score, classification_report
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from torchmetrics import Precision, StatScores
from torchmetrics.classification import MulticlassStatScores
from torchmetrics import MetricCollection
from torchmetrics.classification import MulticlassAccuracy, MulticlassPrecision, MulticlassRecall, MulticlassFBetaScore, MulticlassConfusionMatrix



class MyDataset(Dataset):
  def __init__(self, subset, transform=None):
      self.subset = subset
      self.transform = transform

  def __getitem__(self, index):
      x, y = self.subset[index]
      if self.transform:
          x = self.transform(x)
      return x, y

  def __len__(self):
      return len(self.subset)


'''def heatmap(data, row_labels, col_labels, ax=None,
            cbar_kw=None, cbarlabel="", **kwargs):
  """
  Create a heatmap from a numpy array and two lists of labels.

  Parameters
  ----------
  data
      A 2D numpy array of shape (M, N).
  row_labels
      A list or array of length M with the labels for the rows.
  col_labels
      A list or array of length N with the labels for the columns.
  ax
      A `matplotlib.axes.Axes` instance to which the heatmap is plotted.  If
      not provided, use current axes or create a new one.  Optional.
  cbar_kw
      A dictionary with arguments to `matplotlib.Figure.colorbar`.  Optional.
  cbarlabel
      The label for the colorbar.  Optional.
  **kwargs
      All other arguments are forwarded to `imshow`.
  """

  if ax is None:
      ax = plt.gca()

  if cbar_kw is None:
      cbar_kw = {}

  # Plot the heatmap
  im = ax.imshow(data, **kwargs)

  # Create colorbar
  cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)
  cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom")

  # Show all ticks and label them with the respective list entries.
  ax.set_xticks(np.arange(data.shape[1]), labels=col_labels)
  ax.set_yticks(np.arange(data.shape[0]), labels=row_labels)

  # Let the horizontal axes labeling appear on top.
  ax.tick_params(top=True, bottom=False,
                  labeltop=True, labelbottom=False)

  # Rotate the tick labels and set their alignment.
  plt.setp(ax.get_xticklabels(), rotation=-30, ha="right",
            rotation_mode="anchor")

  # Turn spines off and create white grid.
  ax.spines[:].set_visible(False)

  ax.set_xticks(np.arange(data.shape[1]+1)-.5, minor=True)
  ax.set_yticks(np.arange(data.shape[0]+1)-.5, minor=True)
  ax.grid(which="minor", color="w", linestyle='-', linewidth=3)
  ax.tick_params(which="minor", bottom=False, left=False)

  return im, cbar


def annotate_heatmap(im, data=None, valfmt="{x:.2f}",
                     textcolors=("black", "white"),
                     threshold=None, **textkw):
  """
  A function to annotate a heatmap.

  Parameters
  ----------
  im
      The AxesImage to be labeled.
  data
      Data used to annotate.  If None, the image's data is used.  Optional.
  valfmt
      The format of the annotations inside the heatmap.  This should either
      use the string format method, e.g. "$ {x:.2f}", or be a
      `matplotlib.ticker.Formatter`.  Optional.
  textcolors
      A pair of colors.  The first is used for values below a threshold,
      the second for those above.  Optional.
  threshold
      Value in data units according to which the colors from textcolors are
      applied.  If None (the default) uses the middle of the colormap as
      separation.  Optional.
  **kwargs
      All other arguments are forwarded to each call to `text` used to create
      the text labels.
  """

  if not isinstance(data, (list, np.ndarray)):
      data = im.get_array()

  # Normalize the threshold to the images color range.
  if threshold is not None:
      threshold = im.norm(threshold)
  else:
      threshold = im.norm(data.max())/2.

  # Set default alignment to center, but allow it to be
  # overwritten by textkw.
  kw = dict(horizontalalignment="center",
            verticalalignment="center")
  kw.update(textkw)

  # Get the formatter in case a string is supplied
  if isinstance(valfmt, str):
      valfmt = matplotlib.ticker.StrMethodFormatter(valfmt)

  # Loop over the data and create a `Text` for each "pixel".
  # Change the text's color depending on the data.
  texts = []
  for i in range(data.shape[0]):
    for j in range(data.shape[1]):
      kw.update(color=textcolors[int(im.norm(data[i, j]) > threshold)])
      text = im.axes.text(j, i, valfmt(data[i, j], None), **kw)
      texts.append(text)
  return texts
'''

'''class Metrics:
    def __init__(self, num_classes, device):
        self.metric_collection = MetricCollection({
            "Accuracy": MulticlassAccuracy(num_classes=num_classes, average='macro'),
            "Precision": MulticlassPrecision(num_classes=num_classes, average='macro'),
            "Recall": MulticlassRecall(num_classes=num_classes, average='macro'),
            "CM": MulticlassConfusionMatrix(num_classes=num_classes)
        }).to(device)
    
    def update(self, preds, target):
        return self.metric_collection(preds, target)
    
    def reset_metrics(self):
        self.metric_collection.reset()
        
    def display_confusion_matrix(self, name_classes):
        CM = self.metric_collection["CM"].cpu().numpy()
        fig, ax = plt.subplots(1, 1, figsize=(22, 15))
        im, cbar = heatmap(CM, name_classes, name_classes, ax=ax, cmap="YlGn", cbarlabel="bla")
        texts = annotate_heatmap(im, valfmt="{x:.1f}")
        fig.tight_layout()
        
    def accuracy(self):
        return self.metric_collection["Accuracy"].compute().cpu().numpy()
    
    def recall(self):
        return self.metric_collection["Recall"].compute().cpu().numpy()
    
    def precision(self):
        return self.metric_collection["Precision"].compute().cpu().numpy()'''
        
    
class Metrics:
    def __init__(self, num_classes, device):
        self.metric_collection = MetricCollection({
            "Accuracy": MulticlassAccuracy(num_classes=num_classes, average=None),
            "Precision": MulticlassPrecision(num_classes=num_classes, average=None),
            "Recall": MulticlassRecall(num_classes=num_classes, average=None)
        }).to(device)
        self.confusion_matrix = torch.DoubleTensor(num_classes, num_classes).zero_().to(device)
        self.num_classes = num_classes
    
    def update(self, preds, target):
        print("preds", preds)
        print("target", target)
        cm = multiclass_confusion_matrix(preds, target, num_classes=self.num_classes)
        self.confusion_matrix = self.confusion_matrix.add(cm)
        return self.metric_collection(preds, target)
    
    def reset_metrics(self):
        self.metric_collection.reset()
    
    def accuracy(self):
        return self.metric_collection["Accuracy"].compute().cpu().numpy()
    
    def recall(self):
        return self.metric_collection["Recall"].compute().cpu().numpy()
    
    def precision(self):
        return self.metric_collection["Precision"].compute().cpu().numpy()
    
    
# exp_lr_scheduler = lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)

# Define the transformation for the images
transform = {
  "train": transforms.Compose([
      transforms.Resize((224,224)),
      transforms.RandomAffine(0, shear=10, scale=(0.8,1.2)),
      transforms.RandomHorizontalFlip(),
      transforms.ToTensor(),
      transforms.Normalize(mean=[0.485, 0.456, 0.406],
                          std=[0.229, 0.224, 0.225])]),
  "test": transforms.Compose([
      transforms.Resize((224,224)),
      transforms.ToTensor(),
      transforms.Normalize(mean=[0.485, 0.456, 0.406],
                          std=[0.229, 0.224, 0.225])])
}
    

def load_dataset(transform, dataset, batch_size=32):
    train_set, test_set = random_split(dataset, [int(dataset_length * 0.8), dataset_length - int(dataset_length * 0.8)])
    train_set = MyDataset(train_set, transform=transform["train"])
    test_set = MyDataset(test_set, transform=transform["test"])
    loader = {
        "train": DataLoader(train_set, batch_size=batch_size, shuffle=True),
        "test": DataLoader(test_set, batch_size=batch_size, shuffle=True)
    }
    return loader, train_set, test_set


def create_model():
    model = models.resnet50(weights=ResNet50_Weights.IMAGENET1K_V1)
    for param in model.parameters():
        param.requires_grad = False
    model.fc = nn.Sequential(
                   nn.Linear(2048, 128),
                   nn.ReLU(inplace=True),
                   nn.Linear(128, num_classes), 
                   nn.LogSoftmax(dim=1))
    return model


def train(model, loader, optimizer, criterion, device):
    running_loss = 0
    for i, (inputs, labels) in enumerate(loader['train']):
        inputs = inputs.to(device)
        labels = labels.to(device)
        outputs = model(inputs)
        optimizer.zero_grad()
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        # running_loss += loss.item() * inputs.size(0)
        running_loss += loss.item()
    return running_loss / len(loader['train'])
    
        
        
def test(model, loader, metrics, device):
    for i, (inputs, labels) in enumerate(loader['test']):
        inputs = inputs.to(device)
        labels = labels.to(device)
        outputs = model(inputs)
        _, preds = torch.max(outputs, 1)
        print("outputs", preds)
        print("inputs", labels)
        m = 0
        model.eval()
        with torch.no_grad():
            metrics_result = metrics.update(preds, labels)
        model.train()
        return metrics_result


# Hyperparameters
batch_size = 32
num_epochs = 15
learning_rate = 0.001
# Load the dataset
print("Data loading...")
start = time.time()
dataset = ImageFolder('/usr/src/app/simpsons_dataset_kaggle')
dataset_length = len(dataset)
name_classes = dataset.classes
num_classes = len(dataset.classes)
loader, train_set, test_set = load_dataset(transform, dataset, batch_size=batch_size)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = create_model().to(device)
# Define the loss function and optimizer
criterion = nn.NLLLoss()
optimizer = optim.SGD(model.fc.parameters(), lr=learning_rate, momentum=0.9)

loss_history = []
metrics = Metrics(num_classes, device)
print('{:.2f}s'.format(time.time() - start))
print('Processing...')
for epoch in range(num_epochs):
    start = time.time()
    epoch_loss = train(model, loader, optimizer, criterion, device)
    loss_history.append(epoch_loss)
    metrics_result = test(model, loader, metrics, device)
    '''print('Epoch: {}\nPrecision: {:.5f}\nRecall: {:.5f}\nAccuracy: {:.5f}\nTime: {:.2f}s\n'.
          format(epoch + 1, 
                 metrics.precision(), 
                 metrics.recall(), 
                 metrics.accuracy(), 
                 time.time() - start))'''
    print("precision", metrics.precision()) 
    print("recall", metrics.recall())
    print("accuracy", metrics.accuracy())
    if epoch != num_epochs - 1:
        metrics.reset_metrics()
    
# Plot the loss history
plt.plot(loss_history)
plt.title('Training Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
# metrics.display_heatmap(name_classes)
plt.show()



