import torch
import numpy as np
import pandas as pd
import torch.nn as nn
from torch import Tensor
import torch.optim as optim
import torchvision.transforms as transforms
from torchvision.datasets import ImageFolder
from torchvision import datasets, models, transforms
from torch.optim import lr_scheduler
from torchvision.transforms import ToTensor
from torchvision.models import ResNet50_Weights, resnet50
from torch.utils.data import DataLoader, random_split, Dataset
import matplotlib
import matplotlib.pyplot as plt
from sklearn.metrics import precision_score, recall_score, accuracy_score, classification_report
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from torchmetrics import Precision, StatScores
from torchmetrics.classification import MulticlassStatScores


class MyDataset(Dataset):
  def __init__(self, subset, transform=None):
      self.subset = subset
      self.transform = transform

  def __getitem__(self, index):
      x, y = self.subset[index]
      if self.transform:
          x = self.transform(x)
      return x, y

  def __len__(self):
      return len(self.subset)


def heatmap(data, row_labels, col_labels, ax=None,
            cbar_kw=None, cbarlabel="", **kwargs):
  """
  Create a heatmap from a numpy array and two lists of labels.

  Parameters
  ----------
  data
      A 2D numpy array of shape (M, N).
  row_labels
      A list or array of length M with the labels for the rows.
  col_labels
      A list or array of length N with the labels for the columns.
  ax
      A `matplotlib.axes.Axes` instance to which the heatmap is plotted.  If
      not provided, use current axes or create a new one.  Optional.
  cbar_kw
      A dictionary with arguments to `matplotlib.Figure.colorbar`.  Optional.
  cbarlabel
      The label for the colorbar.  Optional.
  **kwargs
      All other arguments are forwarded to `imshow`.
  """

  if ax is None:
      ax = plt.gca()

  if cbar_kw is None:
      cbar_kw = {}

  # Plot the heatmap
  im = ax.imshow(data, **kwargs)

  # Create colorbar
  cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)
  cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom")

  # Show all ticks and label them with the respective list entries.
  ax.set_xticks(np.arange(data.shape[1]), labels=col_labels)
  ax.set_yticks(np.arange(data.shape[0]), labels=row_labels)

  # Let the horizontal axes labeling appear on top.
  ax.tick_params(top=True, bottom=False,
                  labeltop=True, labelbottom=False)

  # Rotate the tick labels and set their alignment.
  plt.setp(ax.get_xticklabels(), rotation=-30, ha="right",
            rotation_mode="anchor")

  # Turn spines off and create white grid.
  ax.spines[:].set_visible(False)

  ax.set_xticks(np.arange(data.shape[1]+1)-.5, minor=True)
  ax.set_yticks(np.arange(data.shape[0]+1)-.5, minor=True)
  ax.grid(which="minor", color="w", linestyle='-', linewidth=3)
  ax.tick_params(which="minor", bottom=False, left=False)

  return im, cbar


def annotate_heatmap(im, data=None, valfmt="{x:.2f}",
                     textcolors=("black", "white"),
                     threshold=None, **textkw):
  """
  A function to annotate a heatmap.

  Parameters
  ----------
  im
      The AxesImage to be labeled.
  data
      Data used to annotate.  If None, the image's data is used.  Optional.
  valfmt
      The format of the annotations inside the heatmap.  This should either
      use the string format method, e.g. "$ {x:.2f}", or be a
      `matplotlib.ticker.Formatter`.  Optional.
  textcolors
      A pair of colors.  The first is used for values below a threshold,
      the second for those above.  Optional.
  threshold
      Value in data units according to which the colors from textcolors are
      applied.  If None (the default) uses the middle of the colormap as
      separation.  Optional.
  **kwargs
      All other arguments are forwarded to each call to `text` used to create
      the text labels.
  """

  if not isinstance(data, (list, np.ndarray)):
      data = im.get_array()

  # Normalize the threshold to the images color range.
  if threshold is not None:
      threshold = im.norm(threshold)
  else:
      threshold = im.norm(data.max())/2.

  # Set default alignment to center, but allow it to be
  # overwritten by textkw.
  kw = dict(horizontalalignment="center",
            verticalalignment="center")
  kw.update(textkw)

  # Get the formatter in case a string is supplied
  if isinstance(valfmt, str):
      valfmt = matplotlib.ticker.StrMethodFormatter(valfmt)

  # Loop over the data and create a `Text` for each "pixel".
  # Change the text's color depending on the data.
  texts = []
  for i in range(data.shape[0]):
    for j in range(data.shape[1]):
      kw.update(color=textcolors[int(im.norm(data[i, j]) > threshold)])
      text = im.axes.text(j, i, valfmt(data[i, j], None), **kw)
      texts.append(text)
  return texts



# Define the batch size
batch_size = 64

class MyMetrics():
  def __init__(self, num_classes, threshold=0.5):
    self.confusion_matrix = np.zeros((num_classes, num_classes), dtype=int)
    self.threshold = threshold

  def display_heatmap(self, class_labels):
    fig, ax = plt.subplots(1, 1, figsize=(22, 15))
    im, cbar = heatmap(self.confusion_matrix, class_labels, class_labels, ax=ax, cmap="YlGn", cbarlabel="bla")
    texts = annotate_heatmap(im, valfmt="{x:.1f}")
    fig.tight_layout()

  def update(self, target, output):
    for i, label in enumerate(target):
      self.confusion_matrix[label] += (output[i].cpu().numpy() >= self.threshold).astype(int)


  

# Define the transformation for the images
transform = {
    "train": transforms.Compose([
        transforms.Resize((224,224)),
        transforms.RandomAffine(0, shear=10, scale=(0.8,1.2)),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406],
                             std=[0.229, 0.224, 0.225])]),
    "test": transforms.Compose([
        transforms.Resize((224,224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406],
                             std=[0.229, 0.224, 0.225])])
}

# Load the dataset
dataset = ImageFolder('simpsons_dataset')
dataset_length = len(dataset)
name_classes = dataset.classes
train_set, test_set = random_split(dataset, [int(dataset_length * 0.8), dataset_length - int(dataset_length * 0.8)])
train_set = MyDataset(train_set, transform=transform["train"])
test_set = MyDataset(test_set, transform=transform["test"])
loader = {
    "train": DataLoader(train_set, batch_size=batch_size, shuffle=True),
    "test": DataLoader(test_set, batch_size=batch_size, shuffle=True)
}

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
resnet = models.resnet50(weights=ResNet50_Weights.IMAGENET1K_V1).to(device)
for param in resnet.parameters():
    param.requires_grad = False
num_classes = len(dataset.classes)
resnet.fc = nn.Sequential(
               nn.Linear(2048, 128),
               nn.ReLU(inplace=True),
               nn.Linear(128, num_classes)).to(device)
# Define the loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(resnet.fc.parameters(), lr=0.0001, momentum=0.9)

# exp_lr_scheduler = lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)

# Train the model
num_epochs = 15
loss_history = []
accuracy_history = []
precision_history = []
recall_history = []
torch.backends.cudnn.benchmark = True
for epoch in range(num_epochs):

  CM = np.zeros((num_classes, num_classes), dtype=int)
  running_loss = 0.0
  running_corrects = 0
  total = 0

  for phase in ["train", "test"]:
    print("Running: ", phase)
    for i, (inputs, labels) in enumerate(loader[phase]):
      inputs = inputs.to(device)
      labels = labels.to(device)
      outputs = resnet(inputs)
      if phase == "train":
        optimizer.zero_grad()
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
        total += labels.size(0)
        running_loss += loss.item() * inputs.size(0)

      if ((i + 1) % 100) == 0:
        print("Batch number: ", i + 1)

      threshold = 0.5
      if phase == "test":
        resnet.eval()
        with torch.no_grad():
          for i, label in enumerate(labels):
            CM[label] += (outputs[i].cpu().numpy() >= threshold).astype(int)
        resnet.train()

    if phase == "test":
      DisplayHeatMap(CM, name_classes)
      plt.show()

    epoch_loss = running_loss / len(train_set)
    epoch_accuracy = running_corrects / total
    loss_history.append(epoch_loss)
    accuracy_history.append(epoch_accuracy)
    print(f'Epoch {epoch+1} loss: {epoch_loss:.3f} accuracy: {epoch_accuracy:.3f}')


class MyModel():
  # Define the transformation for the images
  transform = {
      "train": transforms.Compose([
          transforms.Resize((224,224)),
          transforms.RandomAffine(0, shear=10, scale=(0.8,1.2)),
          transforms.RandomHorizontalFlip(),
          transforms.ToTensor(),
          transforms.Normalize(mean=[0.485, 0.456, 0.406],
                              std=[0.229, 0.224, 0.225])]),
      "test": transforms.Compose([
          transforms.Resize((224,224)),
          transforms.ToTensor(),
          transforms.Normalize(mean=[0.485, 0.456, 0.406],
                              std=[0.229, 0.224, 0.225])])
  }
  def __init__(self, ):

  def train():
  
  def test():
  
# Plot the loss history
plt.plot(loss_history)
plt.title('Training Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.show()

# Plot the accuracy history
plt.plot(accuracy_history)
plt.title('Training Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.show()


