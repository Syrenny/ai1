import time
import torch
import numpy as np
import pandas as pd
import torch.nn as nn
from torch import Tensor
import torch.optim as optim
import torchvision.transforms as transforms
from torchvision.datasets import ImageFolder
from torchvision import datasets, models, transforms
from torch.optim import lr_scheduler
from torchvision.transforms import ToTensor
from torchvision.models import ResNet50_Weights, resnet50
from torch.utils.data import DataLoader, random_split, Dataset
import matplotlib
import matplotlib.pyplot as plt
from sklearn.metrics import precision_score, recall_score, accuracy_score, classification_report
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from torchmetrics import Precision, StatScores
from torchmetrics.classification import MulticlassStatScores
from torchmetrics import MetricCollection
from torchmetrics.classification import MulticlassAccuracy, MulticlassPrecision, MulticlassRecall, MulticlassFBetaScore, MulticlassConfusionMatrix
from torchmetrics.functional.classification import multiclass_confusion_matrix, multiclass_stat_scores


class MyDataset(Dataset):
  def __init__(self, subset, transform=None):
      self.subset = subset
      self.transform = transform

  def __getitem__(self, index):
      x, y = self.subset[index]
      if self.transform:
          x = self.transform(x)
      return x, y

  def __len__(self):
      return len(self.subset)
    
    
class Metrics:
    def __init__(self, num_classes, device):
        self.stat_scores = torch.DoubleTensor(5, num_classes).zero_().to(device)
        self.confusion_matrix = torch.DoubleTensor(num_classes, num_classes).zero_().to(device)
        self.num_classes = num_classes
    
    def update(self, preds, target):
        cm = multiclass_confusion_matrix(preds, target, num_classes=self.num_classes)
        self.confusion_matrix = self.confusion_matrix.add(cm)
        ss = multiclass_stat_scores(preds, target, self.num_classes, average=None)
        self.stat_scores = self.stat_scores.add(ss)
        
    def accuracy(self):
        # (tp + tn) / (tp + tn + fp + fn)
        numer = self.stat_scores[0].add(self.stat_scores[2])
        denom = self.stat_scores.sum(1)
        return numer.div(denom.sub(self.stat_scores[4])) # sub support 
    
    def recall(self):
        # tp / (tp + fn)
        return self.stat_scores[0].div(self.stat_scores[0].add(self.stat_scores[3]))
    
    def precision(self):
        # tp / (tp + fp)
        return self.stat_scores[0].div(self.stat_scores[0].add(self.stat_scores[1]))
    
    
# exp_lr_scheduler = lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)

# Define the transformation for the images
transform = {
  "train": transforms.Compose([
      transforms.Resize((224,224)),
      transforms.RandomAffine(0, shear=10, scale=(0.8,1.2)),
      transforms.RandomHorizontalFlip(),
      transforms.ToTensor(),
      transforms.Normalize(mean=[0.485, 0.456, 0.406],
                          std=[0.229, 0.224, 0.225])]),
  "test": transforms.Compose([
      transforms.Resize((224,224)),
      transforms.ToTensor(),
      transforms.Normalize(mean=[0.485, 0.456, 0.406],
                          std=[0.229, 0.224, 0.225])])
}
    

def load_dataset(transform, dataset, batch_size=32):
    train_set, test_set = random_split(dataset, [int(dataset_length * 0.8), dataset_length - int(dataset_length * 0.8)])
    train_set = MyDataset(train_set, transform=transform["train"])
    test_set = MyDataset(test_set, transform=transform["test"])
    loader = {
        "train": DataLoader(train_set, batch_size=batch_size, shuffle=True),
        "test": DataLoader(test_set, batch_size=batch_size, shuffle=True)
    }
    return loader, train_set, test_set


def create_model():
    model = models.resnet50(weights=ResNet50_Weights.IMAGENET1K_V1)
    for param in model.parameters():
        param.requires_grad = False
    model.fc = nn.Sequential(
                   nn.Linear(2048, 128),
                   nn.ReLU(inplace=True),
                   nn.Linear(128, num_classes), 
                   nn.LogSoftmax(dim=1))
    return model


def train(model, loader, optimizer, criterion, device):
    running_loss = 0
    for i, (inputs, labels) in enumerate(loader['train']):
        inputs = inputs.to(device)
        labels = labels.to(device)
        outputs = model(inputs)
        optimizer.zero_grad()
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        # running_loss += loss.item() * inputs.size(0)
        running_loss += loss.item()
    return running_loss / len(loader['train'])
    
        
        
def test(model, loader, metrics, device):
    for i, (inputs, labels) in enumerate(loader['test']):
        inputs = inputs.to(device)
        labels = labels.to(device)
        outputs = model(inputs)
        _, preds = torch.max(outputs, 1)
        m = 0
        model.eval()
        with torch.no_grad():
            metrics_result = metrics.update(preds, labels)
        model.train()
        return metrics_result


# Hyperparameters
batch_size = 32
num_epochs = 15
learning_rate = 0.001
# Load the dataset
print("Data loading...")
start = time.time()
dataset = ImageFolder('/usr/src/app/simpsons_dataset_kaggle')
dataset_length = len(dataset)
name_classes = dataset.classes
num_classes = len(dataset.classes)
loader, train_set, test_set = load_dataset(transform, dataset, batch_size=batch_size)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = create_model().to(device)
# Define the loss function and optimizer
criterion = nn.NLLLoss()
optimizer = optim.SGD(model.fc.parameters(), lr=learning_rate, momentum=0.9)

loss_history = []
metrics = Metrics(num_classes, device)
print('{:.2f}s'.format(time.time() - start))
print('Processing...')
for epoch in range(num_epochs):
    start = time.time()
    epoch_loss = train(model, loader, optimizer, criterion, device)
    loss_history.append(epoch_loss)
    metrics_result = test(model, loader, metrics, device)
    print('Epoch: {}\nPrecision: {:.5f}\nRecall: {:.5f}\nAccuracy: {:.5f}\nTime: {:.2f}s\n'.
          format(epoch + 1, 
                 metrics.precision().cpu().numpy().mean(), 
                 metrics.recall().cpu().numpy().mean(), 
                 metrics.accuracy().cpu().numpy().mean(), 
                 time.time() - start))
    if epoch != num_epochs - 1:
        metrics.reset_metrics()
    
# Plot the loss history
plt.plot(loss_history)
plt.title('Training Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
# metrics.display_heatmap(name_classes)
plt.show()



